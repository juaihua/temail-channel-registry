syntax = "proto3";
import "google/protobuf/any.proto";
option java_multiple_files = true;
option java_package = "com.syswin.temail.channel.grpc.servers";
option java_outer_classname = "ChannelRegistry";
option objc_class_prefix = "CRY";
package channel;


//网关节点状态枚举值
enum GatewayServerState{
    onLine = 0;
    offLine = 1;
    cleaning = 2;
    history = 3;
}


//网关节点状态数据 - 对应改造前： CdtpServer
message GatewayServer{
  string ip = 1;
  string processId = 2;
  string curStateBeginTime = 3;
  GatewayServerState gatewayServerState = 4;
}


//通用响应结果封装 - 对应改造前：ComnRespData
message CommonResponse{
  string msg = 1;
  bool isSuccess = 2;
  google.protobuf.Any respData = 3;
}


//网关节点持有的channel状态信息 - 对应改造前：TemailAcctSts
message ChannelLocation{
  string account = 1;
  string devId = 2;
  string hostOf = 3;
  string processId = 4;
  string mqTopic = 5;
  string mqTag = 6;
}


//网关节点持有的channel状态信息集合 - 对应改造前：TemailAcctStses
message ChannelLocationes{
 repeated ChannelLocation channelLocationList = 1;
}

//用于传递账户信息的包装bean, 单独用string作为形参, protobuf编译不通过!
message UserAccount{
  string account = 1;
}

//服务端功能定义
service GatewayRegistrySyncServer{

  //gateserver注册服务
  rpc serverRegistry(GatewayServer) returns(CommonResponse) {}

  //gateServer心跳处理服务
  rpc serverHeartBeat(GatewayServer) returns(CommonResponse) {}

  //gatesServer上的channel信息同步到存储层
  rpc syncChannelLocationes(ChannelLocationes) returns(CommonResponse) {}

  //从存储层移除指定的channels信息
  rpc removeChannelLocationes(ChannelLocationes) returns(CommonResponse) {}

  //返回指定account的全部channels数据 - 这里只传递string 编译不过去，用包装类型
  rpc getChannelLocationesByAccount(UserAccount) returns(CommonResponse) {}

}
